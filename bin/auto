#!/usr/bin/env node
const CLApp = require('app-term-kit');
const tool = require('../src/tools.js');
const fs = require('fs');
//const puppeteer = require('puppeteer');
const puppeteer = require('puppeteer-extra')

// add stealth plugin and use defaults (all evasion techniques)
const StealthPlugin = require('puppeteer-extra-plugin-stealth')
puppeteer.use(StealthPlugin())
const puppeteerArgs = [
    '--enable-features=NetworkService',
    '--no-sandbox',
    '--disable-setuid-sandbox',
    '--disable-dev-shm-usage',
    '--disable-web-security',
    '--disable-features=IsolateOrigins,site-per-process',
    //'--shm-size=3gb', // this solves the issue
    '--disable-gpu',
    '--window-size=1920x1080'
]


let app = new CLApp('automaton', {
    copyright : 'Abbey Hawk Sparrow',
    copystart : '2022',
    defaults : `{
  // This file was autogenerated by automaton
  //
  "debug": false
}`
});

app.command({
    name : 'xpath',
    description: 'search for provided xpath selection in a document',
    examples : [
        [
            '$0 xpath "//table/tbody/tr" dump.html',
            'select all table rows in the file `dump.html`'
        ]
    ],
    action : function(argv, target, complete){
        let filename = argv._.pop();
        fs.readFile(filename, (err, body)=>{
            tool.selectXpath(target, body.toString(), (err, result)=>{
                process.stdout.write(JSON.stringify(result, null, '    '));
                complete();
            });
        });
    }
});

app.command({
    name : 'regex',
    description: 'search for provided regex selection in a document',
    examples : [
        [
            '$0 regex "<tr>(.*?)</tr>" dump.html',
            'select all table rows in the file `dump.html`'
        ]
    ],
    action : function(argv, target, complete){
        complete();
    }
});

const doScrape = function(argv, target, complete){
    tool.performScrape(target, (err, result)=>{
        process.stdout.write(JSON.stringify(result, null, '    '));
        complete();
    });
}

app.command({
    name : 'scrape',
    description: 'perform a scrape with a given definition',
    examples : [
        [
            '$0 scrape ./bot.xml',
            'use the definition `./bot.xml` to scrape and return some data'
        ],
        [
            '$0 scrape ./bot.xml --data \'{"name":"some-value"}\'',
            'use the definition `./bot.xml` to scrape and return some data given the provided data'
        ]
    ],
    action : doScrape
});

app.command({
    name : 'run',
    description: 'perform a scrape with a given definition',
    examples : [ ],
    action : doScrape
});

app.command({
    name : 'fetch',
    description: 'fetch the final DOM after load for a given URL',
    examples : [
        [
            '$0 fetch http://my.domain',
            'fetch data from my.domain'
        ]
    ],
    action : function(argv, target, complete){
        puppeteer.launch({
            headless: true
        }).then((browser)=>{
            browser.newPage().then((page)=>{
                page.goto(
                    target,
                    { waitUntil: 'load' }
                ).then((result)=>{
                    page.evaluate(
                        ()=> document.documentElement.outerHTML
                    ).then((html)=>{
                        process.stdout.write(html);
                        setTimeout(()=>{
                            process.exit();
                        }, 100);
                    }).catch((ex4)=>{
                        throw new Error('Failed to export HTML');
                    });
                }).catch((ex3)=>{
                    console.log(ex3)
                    throw new Error('failed to navigate to: '+target);
                });
            }).catch((ex2)=>{
                throw new Error('Tab failed to open');
            });
        }).catch((ex)=>{
            throw new Error('Puppeteer failed to launch');
        })
    }
});

app.argument('data', 'string', 'JSON payload defining data for the script', 1);

app.argument('puppeteer-chromium', 'boolean', 'use a chromium instance through puppeteer', 0);
app.argument('playwright-chromium', 'boolean', 'use a chromium instance through playwright', 0);
app.argument('playwright-webkit', 'boolean', 'use a webkit instance through playwright', 0);
app.argument('playwright-firefox', 'boolean', 'use a firefox instance through playwright', 0);
app.argument('cheerio', 'boolean', 'use cheerio to do a textual scrape', 0);
app.argument('jsdom', 'boolean', 'use jsdom + request to do DOM scrape', 0);

app.header();
app.footer();
app.help();
app.run((err)=>{
    if(err) console.log(err);
});
